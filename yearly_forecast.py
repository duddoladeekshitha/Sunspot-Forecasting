# -*- coding: utf-8 -*-
"""Yearly_forecast.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1X1La6UNXheE-jJMo7x7QKQlPv0-FeExe
"""

import pandas as pd
import numpy as np
from prophet import Prophet
from sklearn.metrics import mean_absolute_error, mean_absolute_percentage_error, r2_score
import matplotlib.pyplot as plt
from tabulate import tabulate

# Load and preprocess the dataset
data_path = 'SN_y_tot_V2.0.csv'
data = pd.read_csv(data_path, sep=';', header=None)

# Assign column names
data.columns = [
    'Year', 'Date Fraction', 'Yearly_Sunspot_Number', 'Standard_Deviation', 'Observations'
]

# Create a datetime column and sort by date
data['Date'] = pd.to_datetime(data['Year'], format='%Y')
data = data.sort_values('Date')

# Handle missing values (-1 indicates missing data)
data['Yearly_Sunspot_Number'] = data['Yearly_Sunspot_Number'].replace(-1, np.nan)
data = data.dropna(subset=['Yearly_Sunspot_Number'])

# Prepare data for Prophet
prophet_data = data[['Date', 'Yearly_Sunspot_Number']].rename(columns={'Date': 'ds', 'Yearly_Sunspot_Number': 'y'})

# Visualization: Historical data
plt.figure(figsize=(12, 6))
plt.plot(prophet_data['ds'], prophet_data['y'], color='blue')
plt.title("Historical Yearly Sunspot Data")
plt.xlabel("Year")
plt.ylabel("Yearly Sunspot Number")
plt.grid()
plt.show()

# Define prediction periods for yearly data
prediction_periods = [1, 10, 20]
freq = 'YS'

# Tune FBProphet parameters and evaluate models
models = [
    {'name': 'Linear Growth', 'growth': 'linear'},
    {'name': 'Logistic Growth', 'growth': 'logistic'},
    {'name': 'Flat Growth', 'growth': 'flat'}
]

results = []

for model_config in models:
    print(f"\n### Model: {model_config['name']} ###\n")

    # Initialize the Prophet model
    model = Prophet(
        growth=model_config['growth'],
        yearly_seasonality=True,
        weekly_seasonality=False,
        daily_seasonality=False,
        seasonality_mode='additive',
        n_changepoints=10,
        changepoint_prior_scale=0.1
    )

    # Add custom seasonality
    model.add_seasonality(name='custom_yearly', period=11, fourier_order=5)

    # Train-test split
    train = prophet_data.iloc[:-5]  # Leave the last 5 years for testing
    test = prophet_data.iloc[-5:]  # Last 5 years for evaluation

    # Add logistic cap if growth is logistic
    if model_config['growth'] == 'logistic':
        train['cap'] = train['y'].max() * 1.5
        test['cap'] = train['y'].max() * 1.5

    # Train the model
    model.fit(train)

    for period in prediction_periods:
        print(f"\nPredicting {period} years into the future...\n")

        # Create a future dataframe
        future = model.make_future_dataframe(periods=period, freq=freq)

        if model_config['growth'] == 'logistic':
            future['cap'] = train['y'].max() * 1.5

        forecast = model.predict(future)

        # Align test data with forecast
        forecast_test = forecast[forecast['ds'].isin(test['ds'])]
        aligned_test = test[test['ds'].isin(forecast_test['ds'])]

        # Extract aligned values
        y_true = aligned_test['y'].values if not aligned_test.empty else []
        y_pred = forecast_test['yhat'].values if not forecast_test.empty else []

        # Evaluate metrics if test data aligns
        if y_true.size > 0:
            mae = mean_absolute_error(y_true, y_pred)
            mape = mean_absolute_percentage_error(y_true, y_pred)
            r2 = r2_score(y_true, y_pred)

            # Collect results
            results.append({
                'Model': model_config['name'],
                'Period': f"{period} years",
                'MAE': mae,
                'MAPE': mape,
                'R2': r2
            })

            # Print metrics
            metrics = [
                ['MAE', mae],
                ['MAPE', mape],
                ['R2 Score', r2]
            ]
            print(tabulate(metrics, headers=["Metric", "Value"], tablefmt="grid"))

        # Visualization: Historical and future predictions
        plt.figure(figsize=(12, 6))
        plt.plot(prophet_data['ds'], prophet_data['y'], label='Historical Data', color='blue')
        plt.plot(forecast['ds'], forecast['yhat'], label='Forecast', color='orange')
        plt.title(f"Historical vs Future Predictions ({period} years)")
        plt.xlabel("Year")
        plt.ylabel("Yearly Sunspot Number")
        plt.legend()
        plt.grid()
        plt.show()

        # Visualization: Forecast components
        model.plot_components(forecast)
        plt.show()

# Print all results in a consolidated table
results_df = pd.DataFrame(results)
print("\n### Model Evaluation Results ###\n")
print(tabulate(results_df, headers="keys", tablefmt="grid"))